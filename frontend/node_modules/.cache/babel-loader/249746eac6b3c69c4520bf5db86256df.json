{"ast":null,"code":"var _jsxFileName = \"/Users/muhi/mycode/imse/testBank/frontend/src/Components/TransactionsList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TransactionsList() {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [customer, setCustomer] = useState([]);\n  const [expenseType, setExpenseType] = useState([]);\n  const [transactionType, setTransactionType] = useState([]);\n  const [edit_id, setEditID] = useState(\"\");\n  useEffect(() => {\n    axios.get(`http://localhost:8000/transaction/`).then(result => setData(result.data)).catch(error => console.log(\"Error\", error));\n    axios.get(`http://localhost:8000/expense-type/`).then(result => setExpenseType(result.data)).catch(error => console.log(\"Error\", error));\n    axios.get(`http://localhost:8000/transaction-type/`).then(result => setTransactionType(result.data)).catch(error => console.log(\"Error\", error));\n    axios.get(`http://localhost:8000/customer/`).then(result => setCustomer(result.data)).catch(error => console.log(\"Error\", error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"flex items-center justify-center min-h-screen bg-indigo-300\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"col-span-12\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"overflow-auto lg:overflow-visible \",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            class: \"table text-gray-800 border-separate space-y-6 text-sm\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              class: \"bg-indigo-200 text-gray-900\",\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  class: \"p-3 text-left\",\n                  children: \"To\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 39,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  class: \"p-3 text-left\",\n                  children: \"Transaction Type\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 40,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  class: \"p-3 text-left\",\n                  children: \"Amount\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 41,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  class: \"p-3 text-left\",\n                  children: \"Expense Category\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 42,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  class: \"p-3 text-left\",\n                  children: \"Action\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 43,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: data === null || data === void 0 ? void 0 : data.map(item => {\n                {\n                  customer === [] ? /*#__PURE__*/_jsxDEV(\"h1\", {\n                    children: \"if the customer is empty array\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 50,\n                    columnNumber: 23\n                  }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n                    children: \"if the customer array has something \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 52,\n                    columnNumber: 23\n                  }, this);\n                } //to make that you have to make {cust|| <h1> Text </h1>} that means if there is no cust then show the header\n                // if u made that {cust && <h1> Text </h1>} that means if there is cust show text\n                // so the state u need 2 check is the customer array if it was empty you do something else do something else\n                // here i want to say if you cannot get a customer from the find above\n                // make a constant cust with test as first name for example let me show you the GET\n                // for now i dont have any entries in the API so i if i try to use the firstname i will get a blank page\n                // so i thought about the cust|| what you told me yesterday\n                // i am done typing you can do now\n\n                const ttype = transactionType === null || transactionType === void 0 ? void 0 : transactionType.find(t => t.id === item.transaction_type);\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  class: \"bg-indigo-200\",\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    class: \"p-3\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      class: \"flex align-items-center\",\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        class: \"ml-3\",\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          class: \"\",\n                          children: cust.firstname\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 72,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          class: \"text-gray-500\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 73,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          class: \"text-gray-500\",\n                          children: item.payment_reference\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 74,\n                          columnNumber: 29\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 71,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 70,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 69,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    class: \"p-3\",\n                    children: item.transaction_type\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 80,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    class: \"p-3 font-bold\",\n                    children: [item.amount, \" \\u20AC\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 81,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    class: \"p-3\",\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      class: \"bg-green-400 text-gray-50 rounded-md px-2\",\n                      children: item.transaction_limit\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 83,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 82,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    class: \"p-3 \",\n                    children: /*#__PURE__*/_jsxDEV(\"a\", {\n                      href: \"#\",\n                      class: \"text-gray-500 hover:text-gray-100  mx-2\",\n                      children: /*#__PURE__*/_jsxDEV(\"button\", {\n                        class: \"material-icons-outlined text-base\",\n                        onClick: () => setEditID(item.id),\n                        children: \"edit\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 92,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 88,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 87,\n                    columnNumber: 23\n                  }, this)]\n                }, item.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 68,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TransactionsList, \"z4QaX7h0/ZERqQhFAvZdV2u6A64=\");\n\n_c = TransactionsList;\nexport default TransactionsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionsList\");","map":{"version":3,"sources":["/Users/muhi/mycode/imse/testBank/frontend/src/Components/TransactionsList.jsx"],"names":["React","useState","useEffect","axios","TransactionsList","data","setData","customer","setCustomer","expenseType","setExpenseType","transactionType","setTransactionType","edit_id","setEditID","get","then","result","catch","error","console","log","map","item","ttype","find","t","id","transaction_type","cust","firstname","payment_reference","amount","transaction_limit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction TransactionsList() {\n  const [data, setData] = useState([]);\n  const [customer, setCustomer] = useState([]);\n  const [expenseType, setExpenseType] = useState([]);\n  const [transactionType, setTransactionType] = useState([]);\n  const [edit_id, setEditID] = useState(\"\");\n  useEffect(() => {\n    axios\n      .get(`http://localhost:8000/transaction/`)\n      .then((result) => setData(result.data))\n      .catch((error) => console.log(\"Error\", error));\n\n    axios\n      .get(`http://localhost:8000/expense-type/`)\n      .then((result) => setExpenseType(result.data))\n      .catch((error) => console.log(\"Error\", error));\n\n    axios\n      .get(`http://localhost:8000/transaction-type/`)\n      .then((result) => setTransactionType(result.data))\n      .catch((error) => console.log(\"Error\", error));\n\n    axios\n      .get(`http://localhost:8000/customer/`)\n      .then((result) => setCustomer(result.data))\n      .catch((error) => console.log(\"Error\", error));\n  }, []);\n  return (\n    <div>\n      <div class=\"flex items-center justify-center min-h-screen bg-indigo-300\">\n        <div class=\"col-span-12\">\n          <div class=\"overflow-auto lg:overflow-visible \">\n            <table class=\"table text-gray-800 border-separate space-y-6 text-sm\">\n              <thead class=\"bg-indigo-200 text-gray-900\">\n                <tr>\n                  <th class=\"p-3 text-left\">To</th>\n                  <th class=\"p-3 text-left\">Transaction Type</th>\n                  <th class=\"p-3 text-left\">Amount</th>\n                  <th class=\"p-3 text-left\">Expense Category</th>\n                  <th class=\"p-3 text-left\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {data?.map((item) => {\n                  {\n                    customer === [] ? (\n                      <h1>if the customer is empty array</h1>\n                    ) : (\n                      <h1>if the customer array has something </h1>\n                    );\n                  }\n                  //to make that you have to make {cust|| <h1> Text </h1>} that means if there is no cust then show the header\n                  // if u made that {cust && <h1> Text </h1>} that means if there is cust show text\n\n                  // so the state u need 2 check is the customer array if it was empty you do something else do something else\n                  // here i want to say if you cannot get a customer from the find above\n                  // make a constant cust with test as first name for example let me show you the GET\n                  // for now i dont have any entries in the API so i if i try to use the firstname i will get a blank page\n                  // so i thought about the cust|| what you told me yesterday\n                  // i am done typing you can do now\n                  const ttype = transactionType?.find(\n                    (t) => t.id === item.transaction_type\n                  );\n                  return (\n                    <tr key={item.id} class=\"bg-indigo-200\">\n                      <td class=\"p-3\">\n                        <div class=\"flex align-items-center\">\n                          <div class=\"ml-3\">\n                            <div class=\"\">{cust.firstname}</div>\n                            <div class=\"text-gray-500\"></div>\n                            <div class=\"text-gray-500\">\n                              {item.payment_reference}\n                            </div>\n                          </div>\n                        </div>\n                      </td>\n                      <td class=\"p-3\">{item.transaction_type}</td>\n                      <td class=\"p-3 font-bold\">{item.amount} €</td>\n                      <td class=\"p-3\">\n                        <span class=\"bg-green-400 text-gray-50 rounded-md px-2\">\n                          {item.transaction_limit}\n                        </span>\n                      </td>\n                      <td class=\"p-3 \">\n                        <a\n                          href=\"#\"\n                          class=\"text-gray-500 hover:text-gray-100  mx-2\"\n                        >\n                          <button\n                            class=\"material-icons-outlined text-base\"\n                            onClick={() => setEditID(item.id)}\n                          >\n                            edit\n                          </button>\n                        </a>\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default TransactionsList;\n"]},"metadata":{},"sourceType":"module"}